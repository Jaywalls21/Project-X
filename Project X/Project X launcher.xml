<?xml version="1.0" encoding="utf-8"?>
<EasyQuestProfile xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <QuestsSorted>
    <QuestsSorted Action="RunCode" NameClass="ToolBox.List();&#xD;&#xA;&#xD;&#xA;ProfileRestarter.StartProfileRestarter();&#xD;&#xA;&#xD;&#xA;ToolBox.Settings();" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;=1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Tauren &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Tauren(1-6) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Tauren(1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Blood Elf (1-6) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Blood Elf (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Orc (1-6) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Orc (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Troll &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Troll (1-6) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Troll (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Undead &amp;&amp; ObjectManager.Me.Level &gt;= 1 &amp;&amp; ObjectManager.Me.Level &lt; 6" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Undead (1-6) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Undead (1-6).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Blood Elf (6-10) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Blood Elf (6-10).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; (!wManager.Wow.Helpers.SpellManager.KnowSpell(6991)) &amp;&amp; (ObjectManager.Me.WowClass == WoWClass.Hunter)" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Blood Elf Hunter has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Blood Elf Hunter.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10 || &#xD;&#xA;ObjectManager.Me.PlayerRace == PlayerFactions.Troll &amp;&amp; ObjectManager.Me.Level &gt;= 6 &amp;&amp; ObjectManager.Me.Level &lt; 10" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Orc (6-10) | Troll has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Orc and Troll (6-10).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; (!wManager.Wow.Helpers.SpellManager.KnowSpell(1515)) &amp;&amp; (ObjectManager.Me.WowClass == WoWClass.Hunter)" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Orc Hunter has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Orc Hunter.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 12" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 12 || &#xD;&#xA;ObjectManager.Me.PlayerRace == PlayerFactions.Troll &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 12" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Orc (10-12) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Orc and Troll (10-12).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 12 &amp;&amp; ObjectManager.Me.Level &lt; 20" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; ObjectManager.Me.Level &lt; 15" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Blood Elf (10-15) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Blood Elf (10-15).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.BloodElf &amp;&amp; ObjectManager.Me.Level &gt;= 15 &amp;&amp; wManager.Wow.Helpers.Usefuls.MapZoneName == &quot;Ghostlands&quot;" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Blood Elf GhostlandsToUndercity has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Blood Elf GhostlandsToUndercity.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; The Barrens (12-20) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\The Barrens (12-20).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.PlayerRace == PlayerFactions.Orc &amp;&amp; ObjectManager.Me.Level &gt;= 10 &amp;&amp; (!wManager.Wow.Helpers.SpellManager.KnowSpell(697)) &amp;&amp; (ObjectManager.Me.WowClass == WoWClass.Warlock)" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Orc Warlock has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Orc Warlock.xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 20 &amp;&amp; ObjectManager.Me.Level &lt; 25" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Stonetalon Mountains (20-25) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Stonetalon Mountains (20-25).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 25 &amp;&amp; ObjectManager.Me.Level &lt; 30" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; AshenAndThousand (25-30) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\AshenAndThousand (25-30).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 30 &amp;&amp; ObjectManager.Me.Level &lt; 35" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Desolace (30-35) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Desolace (30-35).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 35 &amp;&amp; ObjectManager.Me.Level &lt; 40" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Dustwallow Marsh (35-40) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Dustwallow Marsh (35-40).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 40 &amp;&amp; ObjectManager.Me.Level &lt; 45" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Feralas (40-45) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Feralas (40-45).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 45 &amp;&amp; ObjectManager.Me.Level &lt; 50" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Tanaris (45-50) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Tanaris (45-50).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 50 &amp;&amp; ObjectManager.Me.Level &lt; 57" />
    <QuestsSorted Action="None" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; UnGoro Crater (50-55) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\UnGoro Crater (50-55).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
    <QuestsSorted Action="If" NameClass="ObjectManager.Me.Level &gt;= 57 &amp;&amp; ObjectManager.Me.Level &lt; 60" />
    <QuestsSorted Action="RunCode" NameClass="ToolBox.ToolBoxLog(DateTime.Now + &quot;  :&quot; + &quot; Sillithus (55-60) has Been Loaded.&quot;);" />
    <QuestsSorted Action="LoadProfile" NameClass="Project X\Sillithus (55-60).xml" />
    <QuestsSorted Action="EndIf" NameClass="" />
  </QuestsSorted>
  <NpcQuest />
  <Npc />
  <EasyQuests />
  <Script>using robotManager.Helpful;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading;
using wManager.Events;
using wManager.Wow.Bot.Tasks;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using System.ComponentModel;
using System.Configuration;
using System.Net;
using System.Windows.Forms;
using robotManager.Products;
using System.Threading.Tasks;
using System.Drawing;
using robotManager.MemoryClass;

    public class ProfileRestarter
    {
        private static bool _IsAfk = false;
        private static Vector3 afkPosition = (Vector3)null;
        private static int timer = 0;
        private static bool _isSubscribed = false;
        private static void WatchForEvents()
        {
            if (!_isSubscribed)
            {
                _isSubscribed = true;

                EventsLuaWithArgs.OnEventsLuaWithArgs += (LuaEventsId id, List&lt;string&gt; args) =&gt;
                {
                    if (id == wManager.Wow.Enums.LuaEventsId.CHAT_MSG_SYSTEM &amp;&amp; Conditions.ProductIsStartedNotInPause)
                    {

                        if (args.FirstOrDefault().Contains("You are now AFK"))
                        {
                            _IsAfk = true;
                            timer = 0;
                            afkPosition = ObjectManager.Me.Position;
                        }
                    }
                };
            }
        }

        public static void StartProfileRestarter()
        {

            Thread ProfileRestarterThread = new Thread(() =&gt;
            {
                Logging.Write("[Restarter]: Profile Restarter initialized", (Logging.LogType)1, Color.Brown);

                string profileName = "Project X\\Project X launcher.xml";
                string currentProfileName = wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName;


                while ((wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName) || !ObjectManager.Me.GetMove) &amp;&amp; Conditions.ProductIsStarted)
                {
                    Thread.Sleep(1000);
                }

                if (!_isSubscribed)
                {
                    Thread.Sleep(Usefuls.Latency + 500);
                    WatchForEvents();
                }

                while (Conditions.ProductIsStarted || Conditions.ProductInPause)
                {

                    if (wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                        break;

                    while (_IsAfk &amp;&amp; timer &lt; 600 &amp;&amp; !wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName.Equals(profileName))
                    {
                        Thread.Sleep(1000);
                        timer++;
                    }

                    if (_IsAfk &amp;&amp; timer &gt;= 600 &amp;&amp; ObjectManager.Me.Position.DistanceTo(afkPosition) &lt; 25)
                    {
                        Logging.Write("[Restarter]: Bot seems to have stopped / went AFK for too long. Restart of profile in process...");
                        wManager.Wow.Helpers.Quest.QuesterCurrentContext.ProfileName = profileName;
                        robotManager.Products.Products.ProductRestart();
                        break;
                    }

                    timer = 0;
                    _IsAfk = false;
                    Thread.Sleep(10000);
                }

                Logging.Write("[Restarter]: Profile Restarter disposed");

            });

            ProfileRestarterThread.Start();
        }
    }


public class ToolBox
{
    public static void ToolBoxLog(String lines)   
    {
        System.IO.Directory.CreateDirectory(@"Profiles\Quester\Project X\Logs\");
        string logpath = Path.Combine(Environment.CurrentDirectory, @"Profiles\Quester\Project X\Logs", "" + " "  + ObjectManager.Me.Name + " 🔥 " + Usefuls.RealmName + ".txt");
        

        try
        {
            System.IO.StreamWriter file = new System.IO.StreamWriter(logpath, true);
            file.WriteLine(lines + "\n");
            file.Close();
        }
        catch (Exception e)
        {
            Logging.Write("[Logger] Error logging" + e);
        }
    }

    public static void List()
    {
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1733.73, -4426.244, 37.31858, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1748.4, -4416.781, 37.27323, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1668.088, -4391.733, 22.17756, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1666.025, -4365.162, 27.4433, "None"), 7.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1537.106, -4379.451, 16.90634, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1549.166, -4327.502, 20.44855, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1737.044, -4478.17, 32.06934, "None"), 4.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1888.123, -4452.734, 19.73206, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1856.235, -4422.517, 7.30606, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1856.235, -4422.517, 7.30606, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1890.279, -4417.67, 12.51004, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1940.485, -4693.287, 29.72934, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(1872.12, -4522.215, 26.97758, "None"), 5.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(-628.2213f, -4465.777f, 46.50518f, "None"), 30.00f, true);
        wManager.wManagerSetting.AddBlackListZone(new Vector3(-794.6517f, -4904.063f, 19.54893f, "None"), 5.00f, true);
        Logging.Write("[Blacklist]: Blacklist Activated.");
        wManager.wManagerSetting.CurrentSetting.Save();
    }

    public static void Settings()
    {
        if (ObjectManager.Me.Level == 1)
        {
            Logging.Write("[Settings]: Started");
            wManager.wManagerSetting.CurrentSetting.Repair = true;
            Logging.Write("[Settings]: Repair = true");
            wManager.wManagerSetting.CurrentSetting.SellGray = true;
            Logging.Write("[Settings]: SellGray = true");
            wManager.wManagerSetting.CurrentSetting.SellGreen = true;
            Logging.Write("[Settings]: SellGreen = true");
            wManager.wManagerSetting.CurrentSetting.Selling = true;
            Logging.Write("[Settings]: Selling = true");
            wManager.wManagerSetting.CurrentSetting.SellWhite = true;
            Logging.Write("[Settings]: SellWhite = true");
            wManager.wManagerSetting.CurrentSetting.MinFreeBagSlotsToGoToTown = 3;
            Logging.Write("[Settings]: MinFreeBagSlotsToGoToTown = 3");
            wManager.wManagerSetting.CurrentSetting.SearchRadius = 300;
            Logging.Write("[Settings]: CurrentSetting.SearchRadius = 300");
            wManager.wManagerSetting.CurrentSetting.MaxUnitsNear = 2;
            Logging.Write("[Settings]: MaxUnitsNear = 2");
            wManager.wManagerSetting.CurrentSetting.NpcScanAuctioneer = false;
            Logging.Write("[Settings]: NpcScanAuctioneer = false");
            wManager.wManagerSetting.CurrentSetting.NpcScanMailboxes = false;
            Logging.Write("[Settings]: NpcScanMailboxes = false");
            wManager.wManagerSetting.CurrentSetting.NpcScanRepair = false;
            Logging.Write("[Settings]: NpcScanRepair = false");
            wManager.wManagerSetting.CurrentSetting.NpcScanVendor = false;
            Logging.Write("[Settings]: NpcScanVendor = false");

            wManager.wManagerSetting.CurrentSetting.HarvestHerbs = false;
            Logging.Write("[Settings]: HarvestHerbs = false");
            wManager.wManagerSetting.CurrentSetting.HarvestMinerals = false;
            Logging.Write("[Settings]: HarvestMinerals = false");

            wManager.wManagerSetting.CurrentSetting.DrinkPercent = 85;
            Logging.Write("[Settings]: DrinkPercent = 85");
            wManager.wManagerSetting.CurrentSetting.FoodPercent = 85;
            Logging.Write("[Settings]: FoodPercent = 85");
            wManager.wManagerSetting.CurrentSetting.TryToUseBestBagFoodDrink = true;
            Logging.Write("[Settings]: TryToUseBestBagFoodDrink = true");

            wManager.wManagerSetting.CurrentSetting.SmoothPath = true;
            Logging.Write("[Settings]: SmoothPath = true");

            wManager.wManagerSetting.CurrentSetting.FlightMasterDiscoverRange = 1000;
            Logging.Write("[Settings]: FlightMasterDiscoverRange = 1000");
            wManager.wManagerSetting.CurrentSetting.FlightMasterTaxiUseOnlyIfNear = true;
            Logging.Write("[Settings]: FlightMasterTaxiUseOnlyIfNear = true");
            wManager.wManagerSetting.CurrentSetting.SkinNinja = false;
            Logging.Write("[Settings]: SkinNinja = false");
            wManager.wManagerSetting.CurrentSetting.TryToAvoidEnemyGroupsRatio = 1;
            Logging.Write("[Settings]: TryToAvoidEnemyGroupsRatio = 1");
            wManager.wManagerSetting.CurrentSetting.FightInteractTargetMinDistance = 29;
            Logging.Write("[Settings]: FightInteractTargetMinDistance = 29");
            wManager.wManagerSetting.CurrentSetting.LootChests = true;
            Logging.Write("[Settings]: LootChests = true");
            wManager.wManagerSetting.CurrentSetting.LootInCombat = true;
            Logging.Write("[Settings]:LootInCombat = true");
            wManager.wManagerSetting.CurrentSetting.IgnoreCombatWithPet = true;
            Logging.Write("[Settings]:IgnoreCombatWithPet = true");

            if (wManager.wManagerSetting.CurrentSetting.GroundMountName == string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseGroundMount = false;
                wManager.wManagerSetting.CurrentSetting.Save();
                Logging.Write("[Settings]; UseGroundMount = False");
            }
            else
             if (wManager.wManagerSetting.CurrentSetting.GroundMountName != string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseGroundMount = true;
                wManager.wManagerSetting.CurrentSetting.Save();
                Logging.Write("[Settings]; UseGroundMount = True");
            }

            if (wManager.wManagerSetting.CurrentSetting.FlyingMountName == string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseFlyingMount = false;
                Logging.Write("[Settings]; UseFlyingMount = False");
            }
            else
            if (wManager.wManagerSetting.CurrentSetting.FlyingMountName != string.Empty)
            {
                wManager.wManagerSetting.CurrentSetting.UseFlyingMount = true;
                Logging.Write("[Settings]; UseFlyingMount = True");
            }

            wManager.wManagerSetting.CurrentSetting.Save();
            Logging.Write("Settings complete.");
        }

    }
}</Script>
  <OffMeshConnections />
  <BlacklistNpc />
  <BlacklistNpcType />
  <Blackspots />
</EasyQuestProfile>